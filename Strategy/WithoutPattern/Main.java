package BehavioralPatterns2.Strategy.WithoutPattern;

public class Main {
    public static void main(String[] args) {
        TransportService service = new TransportService();

        // Едем на такси
        service.travelToAirport("taxi");

        // Едем на автобусе
        service.travelToAirport("bus");

        // Едем на метро
        service.travelToAirport("metro");
    }
}

//Проблемы такого кода:
//Нарушение принципа открытости-закрытости (OCP):
//Если мы захотим добавить новый вид транспорта (например, каршеринг),
// придётся изменить код класса TransportService, добавив новое условие в метод travelToAirport().
//
//Нарушение принципа единственной ответственности (SRP):
//Метод travelToAirport() отвечает за логику выбора транспорта и за вывод сообщений.
// Это затрудняет поддержку и расширение кода.
//
//Трудности с поддержкой и тестированием:
//При увеличении числа видов транспорта код станет сложнее,
// а тестировать его будет труднее из-за большого количества условий.

//Как паттерн «Стратегия» решает эту задачу?
//Паттерн «Стратегия» предлагает вынести каждую стратегию (в нашем случае — вид транспорта) в отдельный класс.
// Это позволяет:
//Легко добавлять новые стратегии без изменения основного кода.
//Инкапсулировать логику для каждого вида транспорта в отдельном классе.
//Гибко переключать стратегии в зависимости от ситуации во время выполнения программы.